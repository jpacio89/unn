package com.unn.engine;import com.unn.engine.data.Datasets;import com.unn.engine.dataset.OuterDataset;import com.unn.engine.metadata.*;import org.junit.Test;import java.util.ArrayList;import static org.junit.Assert.*;public class TestValueMapper {    String[] getNumericParts(String suffix, String group) {        return group            .replace("numeric_", "")            .replace(suffix, "")            .split("_");    }    @Test    public void testNumericDescriptor() {        OuterDataset outer = Datasets.dummy1();        ValueMapper mapper = new ValueMapper(outer);        assertEquals(mapper.getInputFeatures().size(), 5);        assertFalse(mapper.getInputFeatures().contains("id"));        assertTrue(mapper.getInputFeatures().contains("primer"));        assertTrue(mapper.getInputFeatures().contains("x"));        assertTrue(mapper.getInputFeatures().contains("y"));        assertTrue(mapper.getInputFeatures().contains("z"));        assertTrue(mapper.getInputFeatures().contains("reward"));        mapper.analyzeValues("x");        ValuesDescriptor descriptor = mapper.getValuesDescriptorByFeature("x");        assertNotNull(descriptor);        assertTrue(descriptor instanceof NumericValuesDescriptor);        NumericValuesDescriptor numericDescriptor = (NumericValuesDescriptor) descriptor;        String suffix = String.format("_%s", numericDescriptor.getSuffix());        assertTrue(suffix.length() == 11);        assertEquals(numericDescriptor.groupCount, Config.DEFAULT_NUMERIC_CLUSTER_COUNT);                numericDescriptor.getOutputFeatures().forEach((group -> {            assertTrue(group.startsWith("numeric_"));            assertTrue(group.endsWith(suffix));            String[] parts = getNumericParts(suffix, group);            Double threshold = Double.parseDouble(parts[0]);            assertTrue(numericDescriptor.possibleValues.contains(threshold));        }));        for (int i = 0; i < 100; ++i) {            double guess = Math.random();            ArrayList<String> groups = numericDescriptor.getActivatedOutputFeatures(Double.toString(guess));            groups.forEach(group -> {                String[] parts = getNumericParts(suffix, group);                Double midPoint = Double.parseDouble(parts[0]);                Boolean inverted = Boolean.parseBoolean(parts[1]);                assertTrue(guess >= midPoint ? !inverted : inverted);            });            numericDescriptor.getOutputFeatures().stream()                .filter(e -> !groups.contains(e))                .forEach(group -> {                    String[] parts = getNumericParts(suffix, group);                    Double midPoint = Double.parseDouble(parts[0]);                    Boolean inverted = Boolean.parseBoolean(parts[1]);                    assertFalse(guess >= midPoint ? !inverted : inverted);                });        }        // TODO: test functor getter?    }    @Test    public void testDiscreteDescriptor() {        OuterDataset outer = Datasets.dummy2();        ValueMapper mapper = new ValueMapper(outer);        assertEquals(mapper.getInputFeatures().size(), 10);        mapper.analyzeValues("top-middle-square");        mapper.analyzeValues("Class");        ValuesDescriptor descriptor = mapper.getValuesDescriptorByFeature("top-middle-square");        assertNotNull(descriptor);        assertTrue(descriptor instanceof DiscreteValuesDescriptor);        DiscreteValuesDescriptor discreteDescriptor = (DiscreteValuesDescriptor) descriptor;        String suffix = String.format("_%s", discreteDescriptor.getSuffix());                assertTrue(suffix.length() == 11);        assertEquals(discreteDescriptor.getOutputFeatures().size(), 3);        discreteDescriptor.getOutputFeatures().forEach(group -> {            assertTrue(group.startsWith("discrete_"));            assertTrue(group.endsWith(suffix));            String value = group.replace("discrete_", "")              .replace(suffix, "");            assertTrue("o".equals(value)  || "x".equals(value) || "b".equals(value));        });        ArrayList<String> oGroups1 = discreteDescriptor.getActivatedOutputFeatures("o");        assertEquals(oGroups1.size(), 1);        assertTrue(oGroups1.get(0).contains("_o_"));        ArrayList<String> oGroups2 = discreteDescriptor.getActivatedOutputFeatures("x");        assertEquals(oGroups2.size(), 1);        assertTrue(oGroups2.get(0).contains("_x_"));        ArrayList<String> oGroups3 = discreteDescriptor.getActivatedOutputFeatures("b");        assertEquals(oGroups3.size(), 1);        assertTrue(oGroups3.get(0).contains("_b_"));        // TODO: fix this        ArrayList<String> oGroups4 = discreteDescriptor.getActivatedOutputFeatures("z");        assertEquals(oGroups4.size(), 0);        // TODO: test functor getter?    }    @Test    public void testMixedDescriptor() {        OuterDataset outer = Datasets.dummy4();        ValueMapper mapper = new ValueMapper(outer);        mapper.analyzeValues("y");        ValuesDescriptor descriptor = mapper.getValuesDescriptorByFeature("y");        assertNotNull(descriptor);        assertTrue(descriptor instanceof MixedValuesDescriptor);        MixedValuesDescriptor mixedDescriptor = (MixedValuesDescriptor) descriptor;        String suffix = String.format("_%s", mixedDescriptor.getSuffix());        assertTrue(suffix.length() == 11);                mixedDescriptor.getOutputFeatures().forEach(group -> {            assertTrue(group.startsWith("discrete_") || group.startsWith("numeric_"));            assertTrue(group.endsWith(suffix));        });        ArrayList<String> oGroups1 = mixedDescriptor.getActivatedOutputFeatures("???????");        assertEquals(oGroups1.size(), 1);        assertTrue(oGroups1.get(0).contains("_???????_"));        for (int i = 0; i < 100; ++i) {            double guess = Math.random();            ArrayList<String> groups = mixedDescriptor.getActivatedOutputFeatures(Double.toString(guess));            groups.forEach(group -> {                assertFalse(group.startsWith("discrete_"));                String[] parts = getNumericParts(suffix, group);                Double midPoint = Double.parseDouble(parts[0]);                Boolean inverted = Boolean.parseBoolean(parts[1]);                assertTrue(guess >= midPoint ? !inverted : inverted);            });            mixedDescriptor.getOutputFeatures().stream()                .filter(e -> !groups.contains(e))                .forEach(group -> {                    if (group.startsWith("discrete_")) {                        return;                    }                    String[] parts = getNumericParts(suffix, group);                    Double midPoint = Double.parseDouble(parts[0]);                    Boolean inverted = Boolean.parseBoolean(parts[1]);                    assertFalse(guess >= midPoint ? !inverted : inverted);                });        }        // TODO: test functor getter?    }}